// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  superadmin
  operator
  packman
  user
}

enum STATUS {
  active
  inactive
}

enum ORDER_STATUS {
  created
  pending_payment
  paid
  cancelled
  onway
  delivered
}

model Users {
  id           String          @id @default(uuid()) @db.Uuid
  firstName    String
  lastName     String
  phone        String          @unique
  password     String
  refreshToken String?
  role         ROLE            @default(user)
  cart         CartItem[]
  wishlist     LikedProducts[]
  Orders       Orders[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model LikedProducts {
  id        String   @id @default(uuid()) @db.Uuid
  clientId  String   @db.Uuid
  client    Users    @relation(fields: [clientId], references: [id])
  productId String   @db.Uuid
  product   Products @relation(fields: [productId], references: [id])

  @@index([clientId])
  @@map("liked_products")
}

model CartItem {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @db.Uuid
  user      Users    @relation(fields: [userId], references: [id])
  productId String   @db.Uuid
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderId   String   @db.Uuid
  order     Orders   @relation(fields: [orderId], references: [id])
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)

  @@map("cart_items")
}

model Categories {
  id        String     @id @default(uuid()) @db.Uuid
  title_uz  String
  title_ru  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  products  Products[]

  @@map("categories")
}

model Products {
  id                String          @id @default(uuid()) @db.Uuid
  title_uz          String
  title_ru          String
  description_uz    String
  description_ru    String
  amount            Decimal         @default(0) @db.Decimal(10, 2)
  discountAmount    Decimal         @default(0) @db.Decimal(10, 2)
  discountStatus    STATUS          @default(inactive)
  discountExpiresAt DateTime?
  stock             Int             @default(0)
  sold              Int             @default(0)
  active            Boolean         @default(false)
  categoryId        String          @db.Uuid
  category          Categories      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  cartItem          CartItem[]
  likedBy           LikedProducts[]
  images            ProductImages[]

  @@map("products")
}

model Images {
  id            String          @id @default(uuid()) @db.Uuid
  name          String
  size          BigInt
  ext           String
  mimetype      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  productImages ProductImages[]

  @@map("images")
}

model ProductImages {
  id        String   @id @default(uuid()) @db.Uuid
  productId String   @db.Uuid
  product   Products @relation(fields: [productId], references: [id])
  imageId   String   @db.Uuid
  image     Images   @relation(fields: [imageId], references: [id])
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_images")
}

model Orders {
  id          String       @id @default(uuid()) @db.Uuid
  userId      String       @db.Uuid
  user        Users        @relation(fields: [userId], references: [id])
  totalAmount Decimal      @default(0) @db.Decimal(10, 2)
  orderItems  CartItem[]
  status      ORDER_STATUS @default(created)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("orders")
}

model Transactions {
  id String @id @default(uuid()) @db.Uuid
  orederId String @db.Uuid
  userId String @db.Uuid
  amount Int
  reason Int
  state Int
  performTime DateTime
  cancelTime DateTime
  createdAt DateTime
  updatedAt DateTime @updatedAt

  @@map("transactions")
}
