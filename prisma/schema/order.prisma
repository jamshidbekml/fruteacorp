model Orders {
    id             String       @id @default(uuid()) @db.Uuid
    orderNumber Int      @default(autoincrement())
    userId         String?      @db.Uuid
    totalAmount    Decimal      @default(0) @db.Decimal(10, 2)
    discountAmount Decimal      @default(0) @db.Decimal(10, 2)
    amount         Decimal      @default(0) @db.Decimal(10, 2)
    deliveryPrice  Decimal      @default(0) @db.Decimal(10, 2)
    status         ORDER_STATUS @default(created)
    type           ORDER_TYPE   @default(product)
    paymentType    PAYMENT_TYPE
    addressId      String?      @db.Uuid
    deliveryInfo   String?
    extraInfo      String?
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    operatorId     String?      @db.Uuid
    packmanId      String?      @db.Uuid
    User           Users?       @relation("userOrders", fields: [userId], references: [id], onDelete: SetNull)
    Operator       Users?       @relation("operatorOrders", fields: [operatorId], references: [id], onDelete: SetNull)
    Packman        Users?       @relation("packmanOrders", fields: [packmanId], references: [id], onDelete: SetNull)

    Address     UserAddress?   @relation(fields: [addressId], references: [id], onDelete: SetNull)
    items       OrderProduct[]
    Transaction Transactions[]
    Reviews     Review[]

    @@map("orders")
}

model OrderProduct {
    id        String    @id @default(uuid())
    orderId   String    @db.Uuid
    productId String?   @db.Uuid
    title_uz  String
    title_ru  String
    quantity  Int       @default(1)
    amount    Decimal   @db.Decimal(10, 2)
    Product   Products? @relation(fields: [productId], references: [id], onDelete: SetNull)
    Order     Orders    @relation(fields: [orderId], references: [id], onDelete: Cascade)

    @@map("order_products")
}
